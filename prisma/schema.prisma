// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  username         String   @unique
  passwordHash     String
  refreshTokenHash String?
  createdAt        DateTime @default(now())
  
  profile          Profile?
  todos            Todo[]
  studentReviews   Review[]  @relation("StudentReviews")
  teacherReviews   Review[]  @relation("TeacherReviews")
  recuits          Recruit[] @relation("Recruits")
  chatLinks      ChatParticipant[]
  sentMessages   Message[]          @relation("MessagesFrom")
}

model Profile {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])
  role             Role     @default(UNDEFINED)
  tags             String[] 
  bio              String   @default("")
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id]) 
  title     String   @default("TITLE")
  content   String   @default("content")
  dueDate   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recruit {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String      @db.ObjectId
  student       User        @relation("Recruits", fields: [studentId], references: [id])
  title         String 
  content       String 
  dayAvailable  Boolean[] 
  tags          String[] 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt 
}

model Chat {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model ChatParticipant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String  @db.ObjectId
  chat      Chat    @relation(fields: [chatId], references: [id])
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())
  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId     String   @db.ObjectId
  chat       Chat     @relation(fields: [chatId], references: [id])
  fromId     String   @db.ObjectId
  from       User     @relation("MessagesFrom", fields: [fromId], references: [id])
  text       String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chatId])
  @@index([fromId])
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  studentId String @db.ObjectId 
  student User @relation("StudentReviews", fields: [studentId], references: [id])
  teacherId String @db.ObjectId
  teacher User @relation("TeacherReviews", fields: [teacherId], references: [id])
  rating Int 
  content String @default("disgusting!!")
  createdAt DateTime @default(now())
  @@index([teacherId])
  @@index([studentId])
}

enum Role {
  UNDEFINED
  TEACHER
  STUDENT
}
